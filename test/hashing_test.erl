%% Copyright (c) 2016 Peter Lemenkov, <lemenkov@gmail.com>,
%% Fast Positive Hash written in Erlang.
%%
%% Portions Copyright (c) 2010-2013 Leonid Yuriev <leo@yuriev.ru>,
%% The 1Hippeus project (t1h).
%%
%% This software is provided 'as-is', without any express or implied
%% warranty. In no event will the authors be held liable for any damages
%% arising from the use of this software.
%%
%% Permission is granted to anyone to use this software for any purpose,
%% including commercial applications, and to alter it and redistribute it
%% freely, subject to the following restrictions:
%%
%% 1. The origin of this software must not be misrepresented; you must not
%%    claim that you wrote the original software. If you use this software
%%    in a product, an acknowledgement in the product documentation would be
%%    appreciated but is not required.
%% 2. Altered source versions must be plainly marked as such, and must not be
%%    misrepresented as being the original software.
%% 3. This notice may not be removed or altered from any source distribution.

-module(hashing_test).

%%
%% Tests
%%

-include_lib("eunit/include/eunit.hrl").

%%
%% Data vectors are taken from https://github.com/dgryski/go-t1ha
%%

hash_list() ->
	[
		<<16#EA, 16#11, 16#31, 16#CF, 16#6F, 16#3F, 16#58, 16#48>>,
		<<16#5D, 16#CE, 16#11, 16#78, 16#CB, 16#CF, 16#D8, 16#71>>,
		<<16#79, 16#09, 16#B3, 16#31, 16#71, 16#43, 16#CC, 16#A1>>,
		<<16#12, 16#E6, 16#E7, 16#C6, 16#69, 16#06, 16#29, 16#B0>>,
		<<16#5D, 16#B5, 16#2D, 16#69, 16#56, 16#D7, 16#94, 16#54>>,
		<<16#41, 16#D6, 16#50, 16#FE, 16#26, 16#C3, 16#62, 16#27>>,
		<<16#77, 16#6F, 16#59, 16#A8, 16#7D, 16#A7, 16#FA, 16#56>>,
		<<16#A4, 16#0C, 16#D9, 16#A0, 16#42, 16#7D, 16#4C, 16#3B>>,
		<<16#73, 16#7B, 16#B7, 16#E3, 16#92, 16#AE, 16#B3, 16#F8>>,
		<<16#D9, 16#6A, 16#85, 16#6F, 16#F8, 16#93, 16#9E, 16#34>>,
		<<16#BB, 16#4A, 16#FE, 16#DE, 16#1A, 16#89, 16#74, 16#E7>>,
		<<16#58, 16#94, 16#ED, 16#72, 16#E5, 16#EC, 16#7A, 16#96>>,
		<<16#35, 16#63, 16#45, 16#85, 16#BF, 16#A2, 16#AE, 16#F9>>,
		<<16#9E, 16#71, 16#CE, 16#EB, 16#88, 16#A4, 16#D1, 16#B0>>,
		<<16#4D, 16#21, 16#60, 16#64, 16#65, 16#28, 16#DD, 16#52>>,
		<<16#E8, 16#33, 16#0F, 16#39, 16#80, 16#42, 16#B5, 16#26>>,
		<<16#57, 16#5B, 16#4B, 16#5C, 16#80, 16#E7, 16#11, 16#51>>,
		<<16#85, 16#DE, 16#83, 16#DF, 16#C7, 16#E2, 16#76, 16#19>>,
		<<16#C9, 16#B5, 16#F3, 16#83, 16#CE, 16#FA, 16#70, 16#71>>,
		<<16#86, 16#AA, 16#D2, 16#8A, 16#5C, 16#47, 16#B4, 16#3C>>,
		<<16#75, 16#40, 16#3F, 16#14, 16#CA, 16#A6, 16#BC, 16#23>>,
		<<16#E5, 16#42, 16#6C, 16#C5, 16#F6, 16#00, 16#85, 16#D0>>,
		<<16#97, 16#D9, 16#5F, 16#94, 16#1B, 16#57, 16#33, 16#18>>,
		<<16#D1, 16#91, 16#38, 16#A4, 16#21, 16#88, 16#FD, 16#C8>>,
		<<16#D5, 16#B6, 16#7B, 16#8F, 16#C4, 16#8D, 16#45, 16#1C>>,
		<<16#72, 16#C3, 16#47, 16#91, 16#01, 16#7D, 16#26, 16#CD>>,
		<<16#3C, 16#3E, 16#F5, 16#6B, 16#FF, 16#5C, 16#43, 16#16>>,
		<<16#F0, 16#4A, 16#14, 16#9C, 16#61, 16#B2, 16#D4, 16#33>>,
		<<16#80, 16#AC, 16#F2, 16#55, 16#3F, 16#9B, 16#D6, 16#EF>>,
		<<16#D3, 16#9E, 16#B1, 16#30, 16#89, 16#56, 16#F0, 16#F3>>,
		<<16#AC, 16#2C, 16#8B, 16#CE, 16#56, 16#6C, 16#41, 16#B2>>,
		<<16#73, 16#F9, 16#77, 16#7A, 16#89, 16#4C, 16#C8, 16#DE>>,
		<<16#C2, 16#58, 16#83, 16#DF, 16#BC, 16#3E, 16#8C, 16#32>>,
		<<16#76, 16#07, 16#A7, 16#BB, 16#23, 16#48, 16#0F, 16#64>>,
		<<16#19, 16#70, 16#E2, 16#19, 16#FE, 16#6F, 16#3A, 16#1C>>,
		<<16#08, 16#1B, 16#85, 16#56, 16#55, 16#1C, 16#3D, 16#30>>,
		<<16#C4, 16#FC, 16#CA, 16#3A, 16#45, 16#30, 16#40, 16#AE>>,
		<<16#5B, 16#78, 16#F0, 16#69, 16#84, 16#CC, 16#D8, 16#F3>>,
		<<16#18, 16#AE, 16#F6, 16#10, 16#0A, 16#43, 16#6E, 16#3A>>,
		<<16#A0, 16#78, 16#E0, 16#BC, 16#5C, 16#5A, 16#1C, 16#F9>>,
		<<16#99, 16#EC, 16#97, 16#0B, 16#BC, 16#C8, 16#A0, 16#53>>,
		<<16#C1, 16#DC, 16#A1, 16#68, 16#7C, 16#DB, 16#7D, 16#77>>,
		<<16#91, 16#FA, 16#2C, 16#92, 16#FF, 16#32, 16#02, 16#1C>>,
		<<16#48, 16#98, 16#D1, 16#3E, 16#44, 16#4A, 16#76, 16#B5>>,
		<<16#06, 16#CE, 16#D1, 16#C3, 16#FB, 16#D8, 16#B1, 16#64>>,
		<<16#97, 16#C1, 16#84, 16#EA, 16#55, 16#8C, 16#45, 16#7F>>,
		<<16#61, 16#72, 16#38, 16#69, 16#13, 16#B1, 16#8E, 16#D2>>,
		<<16#4A, 16#5C, 16#E0, 16#B4, 16#99, 16#FA, 16#C8, 16#54>>,
		<<16#37, 16#DC, 16#97, 16#99, 16#E1, 16#68, 16#FE, 16#BC>>,
		<<16#D8, 16#14, 16#FD, 16#9E, 16#8F, 16#BE, 16#3B, 16#D5>>,
		<<16#2B, 16#47, 16#53, 16#21, 16#AD, 16#3C, 16#3B, 16#A3>>,
		<<16#1F, 16#E5, 16#BA, 16#85, 16#3D, 16#2D, 16#71, 16#84>>,
		<<16#58, 16#09, 16#93, 16#74, 16#C2, 16#A0, 16#20, 16#18>>,
		<<16#BA, 16#0F, 16#27, 16#1E, 16#A5, 16#BB, 16#EE, 16#FC>>,
		<<16#19, 16#AA, 16#09, 16#07, 16#3A, 16#F0, 16#CC, 16#4D>>,
		<<16#43, 16#14, 16#60, 16#9D, 16#59, 16#86, 16#97, 16#B6>>,
		<<16#6B, 16#C8, 16#B6, 16#FF, 16#93, 16#F4, 16#30, 16#3B>>,
		<<16#BD, 16#83, 16#F8, 16#21, 16#30, 16#2D, 16#E2, 16#12>>,
		<<16#5D, 16#28, 16#7B, 16#BD, 16#0D, 16#F5, 16#88, 16#75>>,
		<<16#4F, 16#69, 16#31, 16#CA, 16#B8, 16#28, 16#6B, 16#9B>>,
		<<16#F0, 16#EE, 16#6D, 16#B5, 16#06, 16#AD, 16#FC, 16#C4>>,
		<<16#C2, 16#0C, 16#86, 16#E5, 16#79, 16#6B, 16#6E, 16#C7>>,
		<<16#C9, 16#B9, 16#CD, 16#6B, 16#C5, 16#F9, 16#0C, 16#5F>>,
		<<16#93, 16#0C, 16#78, 16#7C, 16#DA, 16#BD, 16#59, 16#AE>>,
		<<16#2A, 16#4B, 16#01, 16#42, 16#9B, 16#28, 16#E9, 16#D9>>,
		<<16#2F, 16#FA, 16#72, 16#B1, 16#1C, 16#8F, 16#1B, 16#00>>,
		<<16#A3, 16#A0, 16#99, 16#F2, 16#19, 16#95, 16#CF, 16#43>>,
		<<16#EC, 16#C4, 16#DF, 16#C2, 16#CC, 16#EF, 16#7D, 16#23>>,
		<<16#C1, 16#C3, 16#5B, 16#91, 16#95, 16#AC, 16#88, 16#8E>>,
		<<16#E2, 16#58, 16#BD, 16#E6, 16#5E, 16#0F, 16#2B, 16#8B>>,
		<<16#40, 16#F7, 16#54, 16#E3, 16#41, 16#B5, 16#6F, 16#AF>>,
		<<16#09, 16#45, 16#CF, 16#4D, 16#17, 16#E9, 16#2A, 16#3B>>,
		<<16#2F, 16#D5, 16#69, 16#0C, 16#42, 16#60, 16#78, 16#29>>,
		<<16#E8, 16#F7, 16#24, 16#55, 16#00, 16#4F, 16#88, 16#A1>>,
		<<16#0B, 16#EC, 16#70, 16#02, 16#8F, 16#43, 16#51, 16#A3>>,
		<<16#96, 16#3D, 16#30, 16#52, 16#69, 16#5F, 16#06, 16#83>>,
		<<16#4A, 16#3F, 16#46, 16#78, 16#AD, 16#5B, 16#D3, 16#68>>,
		<<16#A0, 16#56, 16#19, 16#0C, 16#E1, 16#14, 16#94, 16#1A>>,
		<<16#DD, 16#4E, 16#C8, 16#46, 16#2F, 16#0E, 16#62, 16#AA>>,
		<<16#C2, 16#03, 16#16, 16#9E, 16#F4, 16#67, 16#71, 16#2B>>,
		<<16#41, 16#8E, 16#72, 16#C5, 16#13, 16#6B, 16#15, 16#3D>>,
		<<16#1E, 16#64, 16#7E, 16#85, 16#19, 16#E3, 16#4B, 16#98>>,
		<<16#DB, 16#D9, 16#52, 16#D0, 16#65, 16#E7, 16#0D, 16#E9>>,
		<<16#5C, 16#E1, 16#23, 16#AA, 16#2B, 16#C1, 16#5A, 16#DE>>,
		<<16#71, 16#C5, 16#D5, 16#B6, 16#52, 16#D8, 16#DE, 16#74>>,
		<<16#0E, 16#D7, 16#3E, 16#0F, 16#FE, 16#CD, 16#25, 16#D3>>,
		<<16#40, 16#DF, 16#92, 16#F2, 16#88, 16#37, 16#D7, 16#A3>>,
		<<16#13, 16#B8, 16#87, 16#3D, 16#0D, 16#C4, 16#1B, 16#67>>,
		<<16#61, 16#17, 16#05, 16#75, 16#3E, 16#89, 16#C2, 16#00>>,
		<<16#57, 16#5C, 16#AD, 16#48, 16#04, 16#8E, 16#0F, 16#A3>>,
		<<16#64, 16#98, 16#D8, 16#F5, 16#31, 16#C8, 16#DE, 16#0A>>,
		<<16#C1, 16#77, 16#BE, 16#58, 16#D4, 16#CC, 16#79, 16#DD>>,
		<<16#A6, 16#47, 16#B6, 16#A1, 16#D6, 16#86, 16#3D, 16#2B>>,
		<<16#F1, 16#03, 16#FE, 16#26, 16#FC, 16#0F, 16#32, 16#96>>,
		<<16#BB, 16#B0, 16#A9, 16#13, 16#C6, 16#7C, 16#A7, 16#FA>>,
		<<16#44, 16#BD, 16#03, 16#E1, 16#B5, 16#AE, 16#53, 16#0C>>,
		<<16#BC, 16#BA, 16#59, 16#63, 16#21, 16#4A, 16#46, 16#CF>>,
		<<16#61, 16#B3, 16#FC, 16#ED, 16#4E, 16#C3, 16#54, 16#B5>>,
		<<16#68, 16#2B, 16#56, 16#C9, 16#F0, 16#33, 16#19, 16#DE>>,
		<<16#8B, 16#8D, 16#A6, 16#3A, 16#E2, 16#43, 16#64, 16#31>>,
		<<16#8D, 16#3C, 16#83, 16#04, 16#37, 16#84, 16#7D, 16#B9>>,
		<<16#4A, 16#74, 16#E1, 16#AC, 16#66, 16#5C, 16#EE, 16#1B>>,
		<<16#61, 16#C3, 16#5A, 16#07, 16#6C, 16#4E, 16#C6, 16#80>>,
		<<16#92, 16#B9, 16#0D, 16#D4, 16#4E, 16#FD, 16#79, 16#7C>>,
		<<16#6A, 16#3D, 16#70, 16#75, 16#F0, 16#F2, 16#D2, 16#D6>>,
		<<16#C7, 16#29, 16#17, 16#01, 16#6F, 16#50, 16#AD, 16#37>>,
		<<16#B2, 16#BB, 16#1A, 16#BF, 16#FD, 16#F8, 16#E4, 16#63>>,
		<<16#D3, 16#3E, 16#7F, 16#77, 16#F0, 16#99, 16#52, 16#1B>>,
		<<16#68, 16#CC, 16#E0, 16#46, 16#66, 16#F4, 16#D8, 16#E4>>,
		<<16#B9, 16#E3, 16#79, 16#A0, 16#14, 16#ED, 16#2C, 16#FB>>,
		<<16#CC, 16#CC, 16#99, 16#A6, 16#3A, 16#ED, 16#F2, 16#34>>,
		<<16#42, 16#E2, 16#38, 16#36, 16#4E, 16#01, 16#C9, 16#EF>>,
		<<16#4F, 16#CE, 16#3A, 16#62, 16#EC, 16#C9, 16#E4, 16#68>>,
		<<16#CF, 16#6A, 16#02, 16#9E, 16#72, 16#1A, 16#44, 16#83>>,
		<<16#00, 16#DF, 16#6C, 16#65, 16#66, 16#00, 16#12, 16#22>>,
		<<16#95, 16#3E, 16#3A, 16#CA, 16#DE, 16#DF, 16#83, 16#C7>>,
		<<16#75, 16#83, 16#C3, 16#0F, 16#D3, 16#41, 16#F9, 16#CF>>,
		<<16#ED, 16#5A, 16#85, 16#9C, 16#20, 16#01, 16#77, 16#28>>,
		<<16#12, 16#08, 16#8F, 16#A9, 16#8E, 16#8D, 16#B6, 16#C7>>,
		<<16#14, 16#0C, 16#12, 16#20, 16#22, 16#CE, 16#0E, 16#8E>>,
		<<16#9E, 16#1A, 16#AC, 16#2F, 16#59, 16#8F, 16#40, 16#5D>>,
		<<16#E7, 16#77, 16#CB, 16#68, 16#84, 16#AA, 16#BA, 16#74>>,
		<<16#88, 16#62, 16#51, 16#9F, 16#17, 16#53, 16#BD, 16#7D>>,
		<<16#7C, 16#A4, 16#AF, 16#D5, 16#74, 16#6E, 16#6B, 16#C8>>,
		<<16#53, 16#8E, 16#19, 16#AF, 16#12, 16#54, 16#90, 16#DD>>,
		<<16#B4, 16#DD, 16#96, 16#99, 16#41, 16#E7, 16#71, 16#6A>>,
		<<16#6D, 16#7C, 16#9A, 16#F2, 16#F4, 16#3A, 16#1A, 16#73>>,
		<<16#01, 16#22, 16#3B, 16#7D, 16#40, 16#8E, 16#48, 16#07>>
	].

bytes(0) ->
	<<>>;
bytes(Number) ->
	<< <<Byte>> || Byte <- lists:seq(0,Number - 1) >>.

hashing_test_() ->
	Seed = 16#0102030405060708,

	% [{0, <<...>>}, {1, <<...>>}, ... {127, <<...>>}]
	HashResults = lists:zip(lists:seq(0,127), hash_list()),
	[
		{
		 lists:flatten(io_lib:format("Round: ~b. Bytes: ~w. Hash: ~w. Seed: ~w.", [Number, bytes(Number), Hash, Seed])),
			fun() -> ?assertEqual(Hash, t1ha:hash(bytes(Number), Seed)) end
		} || {Number, Hash} <- HashResults
	].

rot64_test_() ->
	[
		{"Test Rot64 S0 (41)",
			fun() -> ?assertEqual(947912704, t1ha:rot64(113, 41)) end
		},
		{"Test Rot64 S1 (17)",
			fun() -> ?assertEqual(15903336184152064, t1ha:rot64(113, 17)) end
		},
		{"Test Rot64 S2 (31)",
			fun() -> ?assertEqual(970662608896, t1ha:rot64(113, 31)) end
		}
	].

mix_test() ->
	?assertEqual(10382489084601, t1ha:mix(113, 10953)).

mux64_test() ->
	?assertEqual(2397440004817816314, t1ha:mux64(4850400029113, 92230410953)).

default_test_() ->
	[
	 {"rs", fun() -> ?assertEqual(253328033115669123, t1ha:rot64(16#0102030405060708, 17)) end},
	 {"ms0", fun() -> ?assertEqual(6215465390497969970, t1ha:mix(16#0102030405060708 bxor 0, 17048867929148541611)) end},
	 {"ms1", fun() -> ?assertEqual(10650851455975661846, t1ha:mux64(253328033115669123, 11242949449147999147)) end},
	 {"new0", fun() -> ?assertEqual(16866316846473631816, t1ha:mux64(t1ha:rot64(16#0102030405060708, 17), 11242949449147999147) + t1ha:mix(16#0102030405060708 bxor 0, 17048867929148541611)) end}
	].
